// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  Folder    Folder[]
  Review    Review[]
  studies   Study[]
  subjects  Subject[]
  topics    Topic[]
  planner   Planner[]

  @@map("users")
}

model Folder {
  id       Int       @id @default(autoincrement())
  name     String
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
  subjects Subject[]
  planner  Planner[]
  Study    Study[]
  Review   Review[]

  @@unique([name, userId])
  @@map("folders")
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String
  folderId Int
  userId   Int
  isDone   Boolean
  folder   Folder    @relation(fields: [folderId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
  topics   Topic[]
  planner  Planner[]
  Study    Study[]
  Review   Review[]

  @@unique([name, folderId, userId])
  @@map("subjects")
}

model Topic {
  id        Int       @id @default(autoincrement())
  name      String
  subjectId Int
  userId    Int
  isDone    Boolean   @default(false)
  subject   Subject   @relation(fields: [subjectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  reviews   Review[]
  studies   Study[]
  planner   Planner[]

  @@unique([name, subjectId, userId])
  @@map("topics")
}

model Review {
  id        Int     @id @default(autoincrement())
  userId    Int
  folderId  Int
  subjectId Int
  topicId   Int
  date      String
  doneDate  String?
  user      User    @relation(fields: [userId], references: [id])
  folder    Folder  @relation(fields: [folderId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
  topic     Topic   @relation(fields: [topicId], references: [id])

  @@map("reviews")
}

model Study {
  id        Int     @id @default(autoincrement())
  userId    Int
  folderId  Int
  subjectId Int
  topicId   Int
  date      String
  user      User    @relation(fields: [userId], references: [id])
  folder    Folder  @relation(fields: [folderId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
  topic     Topic   @relation(fields: [topicId], references: [id])

  @@map("studies")
}

model Planner {
  id        Int     @id @default(autoincrement())
  userId    Int
  folderId  Int
  subjectId Int
  topicId   Int
  weekDay   Int
  user      User    @relation(fields: [userId], references: [id])
  folder    Folder  @relation(fields: [folderId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
  topic     Topic   @relation(fields: [topicId], references: [id])

  @@unique([folderId, subjectId, topicId, userId, weekDay])
  @@map("planners")
}
